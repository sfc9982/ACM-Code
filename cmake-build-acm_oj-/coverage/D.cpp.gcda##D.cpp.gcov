        -:    0:Source:D:/Desktop/ACM/HLJCPC/D.cpp
        -:    0:Graph:D:\Desktop\ACM\cmake-build-acm_oj-\CMakeFiles\D.dir\HLJCPC\D.cpp.gcno
        -:    0:Data:D:\Desktop\ACM\cmake-build-acm_oj-\CMakeFiles\D.dir\HLJCPC\D.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by sfc9982 on 2022/5/15.
        -:    3://
        -:    4:
        -:    5:#include <algorithm>
        -:    6:#include <cmath>
        -:    7:#include <cstring>
        -:    8:#include <functional>
        -:    9:#include <iomanip>
        -:   10:#include <iostream>
        -:   11:#include <queue>
        -:   12:#include <stack>
        -:   13:#include <string>
        -:   14:
        -:   15:#define M_PI 3.14159265358979323846
        -:   16:
        -:   17:using namespace std;
        -:   18:
function _Z4distdddd called 0 returned 0% blocks executed 0%
    #####:   19:double dist(double x1, double y1, double x2, double y2)
        -:   20:{
       4*:   21:    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
        -:   22:}
        -:   23:
function main called 1 returned 100% blocks executed 100%
        1:   24:int main()
        -:   25:{
        1:   26:    ios::sync_with_stdio(false);
        1:   26-block  0
call    0 returned 1
        -:   27:    cin.tie(nullptr), cout.tie(nullptr);
        -:   28:
        -:   29:
        -:   30:    int T;
        1:   31:    cin >> T;
call    0 returned 1
        5:   32:    while (T--)
        5:   32-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:   32-block  1
        -:   33:    {
        -:   34:        int x1, y1, x2, y2, x3, y3;
        4:   35:        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
        4:   35-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
call    3 returned 4
call    4 returned 4
call    5 returned 4
        4:   36:        double k0 = (y2 - y1) / (x2 - x1 + 0.000001);
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   37:        double theta1 = atan2(y2 - y1, x2 - x1) * 180 / M_PI;
        8:   38:        double theta2 = asin(2.0f / dist(x1, y1, x2, y2)) * 180 / M_PI;
        4:   39:        double theta3 = atan2(y3 - y2, x3 - x2) * 180 / M_PI;
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   40:        double offset1 = theta1 + theta2;
        4:   41:        double offset2 = theta1 - theta2;
        4:   42:        double vert1 = offset2 + 90;
        4:   43:        double vert2 = offset1 - 90;
        -:   44:        double k1 = tan(vert1 * M_PI / 180);
        -:   45:        double k2 = tan(vert2 * M_PI / 180);
        -:   46:        double k3 = (y3 - y2) / (x3 - x2 + 0.00001);
        4:   47:        if (theta3 < 5 + vert1 && theta3 > -5 + vert2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   47-block  0
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        -:   48:        {
        -:   49:            cout << "yes" << endl;
        -:   50:        }
        -:   51:        else
        -:   52:        {
        -:   53:            cout << "no" << endl;
        -:   54:        }
        -:   55:        //        cout << fixed << setprecision(2) << k1 << " " << k2 << endl;
        -:   56:    }
        -:   57:    return 0;
        -:   58:}
